<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RMHUB</title>
    <link rel="icon" type="image/x-icon" href="/images/NavImg.jpg">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.1.2/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">


    <style>
        /* Paste the styles from addproducts.ejs here */
        body {
            background-color: #f8f9fa;
            font-family: Arial, sans-serif;
        }

        .navbar {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 15px;
            background-color: #3cf696;
            height: 60px;
        }

        .navbar img {
            height: 100%;
        }

        .container {
            max-width: 600px;
            /* Reduced container width */
            margin: 0 auto;
            margin-top: 30px;
            margin-bottom: 30px;
        }

        .form-container {
            width: 100%;
            padding: 20px;
            background-color: #fff;
            border-radius: 20px;
            box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
            animation: slideIn 1s ease;
            margin: 0 auto;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .btn-success {
            background-color: #3cf696;
            border-color: #3cf696;
            color: #fff;
            font-weight: bold;
            transition: all 0.3s ease;
            display: inline-block;
            padding: 10px 20px;
            border-radius: 10px;
            cursor: pointer;
            width: 100%;
            /* Full-width button */
            margin-top: 20px;
            /* Spacing between button and form fields */
        }

        .btn-success:hover {
            background-color: #36e687;
            border-color: #36e687;
        }

        .product-title {
            background-color: #3cf696;
            color: #fff;
            padding: 15px;
            border-radius: 20px;
            margin-bottom: 30px;
            font-size: 28px;
            text-align: center;
        }

        /* Form styles */
        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            font-weight: bold;
            color: black;
        }

        .form-control {
            border-radius: 10px;
            border: 1px solid #3CF696;
            padding: 10px;
            width: 100%;
            background-color: #ffffff;
        }

        .image-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .preview-image {
            max-width: 100px;
            max-height: 100px;
            object-fit: cover;
        }

        .preview-image-wrapper {
            position: relative;
            display: inline-block;
            overflow: hidden;
        }

        .close-button {
            position: absolute;
            top: 5px;
            right: 5px;
            padding: 5px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            z-index: 1;
        }
        .back-btn {
            position: absolute;
            top: 60px;
            left: 40px;
            background-color: transparent;
            border: none;
            font-size: 16px;
            color: #3cf696;
            cursor: pointer;
        }

        .back-btn i {
            margin-right: 5px;
        }

    </style>
</head>

<body>
    <!-- <div class="navbar">
        <img src="/images/NavImg.jpg" alt="Logo">
    </div> -->
    <!-- <button type="button" class="back-btn" onclick="location.href ='/admin/products'">
        <i class="fas fa-arrow-left"></i> Back To Products
    </button> -->
    <%- include("sidebar") %>
    <div class="container">
        <div class="form-container">
            <h2 class="product-title">Edit Product</h2>
            <form action="/admin/editproducts/<%= product.id %>" method="post" enctype="multipart/form-data"
                onsubmit="return validateForm()">
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Product Name" name="productName"
                        value="<%= product.productName %>" id="productName">
                    <div id="productNameError" class="error"></div>
                </div>
                <div class="form-group">
                    <input type="number" class="form-control" placeholder="Price" name="price"
                        value="<%= product.price %>" id="price">
                    <div id="priceError" class="error"></div>
                </div>
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Model" name="model"
                        value="<%= product.model %>" id="model">
                    <div id="modelError" class="error"></div>
                </div>
                <div class="form-group">
                    <textarea class="form-control" placeholder="Description" name="description"
                        id="description"><%= product.description %></textarea>
                    <div id="descriptionError" class="error"></div>
                </div>
                <div class="form-group">
                    <input type="number" class="form-control" placeholder="Available Stock" name="availableStock"
                        value="<%= product.availableStock %>" id="availableStock">
                    <div id="availableStockError" class="error"></div>
                </div>
                <div class="form-group">
                    <input type="file" class="form-control" name="image" id="image" multiple>
                    <div id="imageError" class="error"></div>
                    <br>
                    <div class="image-container" id="preview">
                        <% product.image.forEach((img, index)=> { %>
                            <div class="preview-image-wrapper">
                                <img src="/<%= img %>" class="preview-image" alt="img">
                                <button type="button" class="close-button" onclick="removeImage(this)">X</button>
                            </div>
                            <% }) %>
                    </div>
                </div>
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Color" name="color"
                        value="<%= product.color %>" id="color">
                    <div id="colorError" class="error"></div>
                </div>
                <div class="form-group">
                    <select class="form-control" name="category" required style="background-color:#d8f0dd">
                        <option value="" disabled>Select Category</option>
                        <!-- Loop through categories fetched from backend and populate dropdown options -->
                        <% categories.forEach(category=> { %>
                            <!-- Check if the current category matches the category associated with the product -->
                            <% if (product.category && product.category.toString()===category._id.toString()) { %>
                                <!-- Set the selected attribute to pre-select the matching category -->
                                <option value="<%= category._id %>" selected>
                                    <%= category.name %>
                                </option>
                                <% } else { %>
                                    <!-- Otherwise, render as a regular option -->
                                    <option value="<%= category._id %>">
                                        <%= category.name %>
                                    </option>
                                    <% } %>
                                        <% }) %>
                    </select>
                    <div id="categoryError" class="error"></div>
                </div>
                <button type="submit" class="btn btn-success">Save</button>
            </form>
        </div>
    </div>
    <!-- JS, Popper.js, jQuery, Cropper.js -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.1.2/sweetalert2.min.js"></script>



    <script>
        // Define filePreviewMap outside of window.onload
    const filePreviewMap = new Map();
    console.log(filePreviewMap);

    // Populate file input field with existing files
    window.onload = function () {
        const existingFiles = document.getElementById('preview').querySelectorAll('.preview-image');
    console.log('Existing files count:', existingFiles.length); // Log the count of existing files
    if (existingFiles.length > 0) {
            existingFiles.forEach(img => {
                const alt = img.alt;
                const src = img.src;

                fetch(src)
                    .then(response => response.blob())
                    .then(blob => {
                        const file = new File([blob], alt, { type: 'image/jpeg' });
                        filePreviewMap.set(img, file);
                    })
                    .catch(error => {
                        console.error('Error fetching image:', error);
                    });
            });
        }
    existingFiles.forEach(img => {
        console.log(img.src); // Log the URL of each existing image
    });
        const files = [];
        existingFiles.forEach(img => {
            fetch(img.src)
                .then(response => response.blob())
                .then(blob => {
                    const file = new File([blob], img.alt, { type: 'image/jpeg' });
                    files.push(file);
                    // Once all files are fetched and created, create a FileList object and assign it to the file input element
                    if (files.length === existingFiles.length) {
                        const fileList = new DataTransfer();
                        files.forEach(file => {
                            fileList.items.add(file);
                        });
                        const imageInput = document.getElementById('image');
                        imageInput.files = fileList.files;
                    }
                });
        });
    };

    document.getElementById('image').addEventListener('change', function () {
        const files = this.files;
        if (files && files.length > 0) {
            const preview = document.getElementById('preview');
            preview.innerHTML = '';
            for (let i = 0; i < files.length; i++) {
                const reader = new FileReader();
                const file = files[i];
                // Check if the file type is an image
                if (file.type.startsWith('image/')) {
                    reader.onload = function (e) {
                        const img = new Image();
                        img.src = e.target.result;
                        img.classList.add('preview-image');
                        filePreviewMap.set(img, file);
                        const closeButton = document.createElement('button');
                        closeButton.innerHTML = 'X';
                        closeButton.classList.add('close-button');
                        closeButton.onclick = function () {
                            const imageWrapper = this.parentElement;
                            imageWrapper.remove();
                            const img = imageWrapper.querySelector('.preview-image');
                            const fileToRemove = filePreviewMap.get(img);
                            if (fileToRemove) {
                                const index = Array.from(document.getElementById('image').files).findIndex(f => f === fileToRemove);
                                if (index !== -1) {
                                    const newFiles = Array.from(document.getElementById('image').files);
                                    newFiles.splice(index, 1);
                                    document.getElementById('image').files = new FileList(newFiles);
                                }
                                // Remove the file from the map
                                filePreviewMap.delete(img);
                            }
                        };
                        const imageWrapper = document.createElement('div');
                        imageWrapper.classList.add('preview-image-wrapper');
                        imageWrapper.appendChild(img);
                        imageWrapper.appendChild(closeButton);
                        preview.appendChild(imageWrapper);
                    };
                    reader.readAsDataURL(file);
                } else {
                    // Display a SweetAlert error message for non-image files
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Only images are allowed!',
                        toast: true,
                        position: 'top-end', // Align to the top-right corner
                        footer: 'File type: ' + file.type,
                        confirmButtonColor: '#3cf696',
                        confirmButtonText: 'OK',
                    });                    
                    // Clear the selected file
                    this.value = '';
                }
            }
        }
    });

    // Function to remove image preview and corresponding file
    function removeImage(element) {
        const imageWrapper = element.parentElement;
        const img = imageWrapper.querySelector('.preview-image');
        console.log('Removing image:', img.src); // Log the image URL
        const fileToRemove = filePreviewMap.get(img); // Get file from filePreviewMap using img as key
        if (fileToRemove) {
            console.log('File to remove:', fileToRemove.name); // Log the file name
            const imageInput = document.getElementById('image');
            const newFiles = Array.from(imageInput.files);
            const index = newFiles.findIndex(f => f.name === fileToRemove.name && f.type === fileToRemove.type);
            if (index !== -1) {
                newFiles.splice(index, 1);
                const newFileList = new DataTransfer();
                newFiles.forEach(file => {
                    newFileList.items.add(file);
                });
                imageInput.files = newFileList.files;
                console.log('File removed from FileList:', fileToRemove.name);
            } else {
                console.log('File not found in FileList:', fileToRemove.name);
            }
            // Remove the file from the map
            filePreviewMap.delete(img); // Remove using img as key
            console.log('Image and file removed successfully.');
            const remainingFiles = document.getElementById('preview').querySelectorAll('.preview-image');
            console.log('Files remaining after removal:', remainingFiles.length); // Log the count of remaining files
            console.log('FilePreviewMap size after removal:', filePreviewMap.size); // Log the size of filePreviewMap
        } else {
            console.log('File not found in filePreviewMap:', img.src);
        }
        imageWrapper.remove();
    }
    

    </script>
    <script>
        // Function to validate the price and availableStock fields
        function validateForm() {
            var productName = document.getElementById('productName').value.trim();
            var price = parseFloat(document.getElementById('price').value);
            var model = document.getElementById('model').value.trim();
            var description = document.getElementById('description').value.trim();
            var availableStock = parseFloat(document.getElementById('availableStock').value);
            var category = document.querySelector('select[name="category"]').value.trim();
            var image = document.getElementById('image').files;

            var isValid = true;

            // Validate product name
            if (productName === '') {
                document.getElementById('productNameError').innerHTML = '*Product Name is required';
                document.getElementById('productNameError').style.color = 'red';
                isValid = false;
            } else {
                document.getElementById('productNameError').innerHTML = '';
            }

            // Validate price
            if (isNaN(price) || price <= 0) {
                document.getElementById('priceError').innerHTML = '*Price must be a positive number';
                document.getElementById('priceError').style.color = 'red';
                isValid = false;
            } else {
                document.getElementById('priceError').innerHTML = '';
            }

            // Validate model
            if (model === '') {
                document.getElementById('modelError').innerHTML = '*Model is required';
                document.getElementById('modelError').style.color = 'red';
                isValid = false;
            } else {
                document.getElementById('modelError').innerHTML = '';
            }

            // Validate description
            if (description === '') {
                document.getElementById('descriptionError').innerHTML = '*Description is required';
                document.getElementById('descriptionError').style.color = 'red';
                isValid = false;
            } else {
                document.getElementById('descriptionError').innerHTML = '';
            }

            // Validate available stock
            if (isNaN(availableStock) || availableStock <= 0) {
                document.getElementById('availableStockError').innerHTML = '*Available Stock must be a positive number';
                document.getElementById('availableStockError').style.color = 'red';
                isValid = false;
            } else {
                document.getElementById('availableStockError').innerHTML = '';
            }

            // Validate category
            if (category === '') {
                document.getElementById('categoryError').innerHTML = '*Category is required';
                document.getElementById('categoryError').style.color = 'red';
                isValid = false;
            } else {
                document.getElementById('categoryError').innerHTML = '';
            }

            // Validate image
            if (!image || image.length === 0) {
                document.getElementById('imageError').innerHTML = '*Image is required';
                document.getElementById('imageError').style.color = 'red';
                isValid = false;
            } else {
                document.getElementById('imageError').innerHTML = '';
            }

            //Validate color
            var color = document.getElementById('color').value.trim();
            if (color === '') {
                document.getElementById('colorError').innerHTML = '*Color is required';
                document.getElementById('colorError').style.color = 'red';
                isValid = false;
            } else {
                document.getElementById('colorError').innerHTML = '';
            }

            return isValid;
        }
    </script>

</body>

</html>