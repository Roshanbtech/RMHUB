<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <title>RMHUB</title>
    <link rel="icon" type="image/x-icon" href="/images/NavImg.jpg">
    <style>
        .banner {
            width: 100%;
            height: 450px;
        }

        .banner img {
            padding-top: 75px;
            width: 100%;
            height: 450px;

        }

        .bt {
            background-color: #3CF696;
            height: 40px;
            width: 100px;
            margin-left: 38%;
            margin-bottom: 10px;
            border-radius: 20px
        }

        h3 {
            text-align: center;
        }

        p {
            text-align: center;
        }

        .card {
            flex: 1;
            margin-top: 20px;
            transition: box-shadow 0.3s ease;
            /* Added transition effect */
            border-radius: 30px;
            overflow: hidden
        }

        .card:hover {
            box-shadow: 0 0 20px #2a2a29;
            /* Updated box-shadow on hover */
        }

        .card img {
            height: 50px;
            /* Adjust the height of the image */
            object-fit: cover;
            /* Maintain aspect ratio for images */

        }

        .card .card-body {
            padding: 15px;
            text-align: center;
        }

        .card h3 {
            font-size: 1.2rem;
            /* Adjust the font size of the heading */
            margin-bottom: 10px;
        }

        .card p {
            font-size: 1rem;
            /* Adjust the font size of the paragraph */
            margin-bottom: 15px;
        }

        .card img {
            height: 50px;
            /* Adjust the height of the image */
            object-fit: cover;
            /* Maintain aspect ratio for images */
            transition: transform 0.3s ease;
        }

        .card:hover img {
            transform: scale(1.1);
            background-color: #d8f0dd;
        }

        .snake-btn {
            position: relative;
            display: inline-block;
            padding: 10px 20px;
            border: none;
            border-radius: 20px;
            background-color: #3CF696;
            color: #ffffff;
            font-size: 16px;
            cursor: pointer;
            overflow: hidden;
            transition: background-color 0.4s, color 0.4s;
        }

        .snake-btn::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            width: calc(100% + 4px);
            height: calc(100% + 4px);
            border: 2px solid transparent;
            border-radius: 20px;
            animation: snake 3s infinite linear;
        }

        @keyframes snake {
            0% {
                transform: translateX(-100%);
                border-color: rgba(0, 0, 0, 0);
            }

            50% {
                transform: translateX(100%);
                border-color: rgba(0, 0, 0, 0.6);
            }

            100% {
                transform: translateX(200%);
                border-color: rgba(0, 0, 0, 0);
            }
        }

        .snake-btn:hover {
            background-color: #3CF696;
            color: black;
            border: 2px solid black;
            font-weight: bold;
        }

        .fas.fa-star.filled {
            color: gold;
        }

        .far.fa-star {
            color: black;
        }

        .heart-container {
            position: absolute;
            top: 10px;
            /* Adjust top positioning */
            right: 10px;
            /* Adjust right positioning */
            z-index: 2;

        }

        /* Style the love icon */
        .add-to-wishlist {
            color: #3cf696;
            width: 30px;
            /* Adjust the width of the love icon */
            height: auto;
            cursor: pointer;
            fill: #fff;
            transition: all 0.3s 0s ease-in-out;
        }


        .add-to-wishlist.fill-heart {
            fill: red;
            transform: scale(1.2);
            transition: all 0.3s 0s ease-in-out;

        }

        .sub-hearts {
            width: 15px;
            position: absolute;
            top: 0;
            left: 0;
            transform: translate(-50%, -50%);
            pointer-events: none;
            z-index: 3;
            fill: #3cf696
        }

        .ribbon {
            position: absolute;
            top: 10px;
            /* Adjust top positioning */
            left: 10px;
            /* Adjust right positioning */
            background-color: #3CF696;
            /* Ribbon background color */
            color: #fff;
            /* Text color */
            font-size: 14px;
            padding: 5px 10px;
            border-radius: 20px;
            z-index: 2;
        }
    </style>
</head>

<body>
    <%- include("nav") %>
        <div class="banner">
            <div>
                <img src="/images/4m1ulf3b.png" alt="tablets">
            </div>
        </div>
        <!-- <button class="snake-btn" id="filterBtn">Filter</button> -->
        <br>
        <% if (category.isListed) { %>
            <button class="snake-btn" id="filterBtn">Filter</button>
            <div class="container">
                <div class="row g-4 mb-4 ">
                    <% data3.forEach(element=> { %>
                        <div class="col-4 col-sm-4 col-md-4 col-lg-4 ">
                            <div class="card" style="border-radius:30px">
                                <div class="heart-container">
                                    <svg id="wishlist-icon-<%= element.id %>" viewBox="0 0 24 22" fill="none"
                                        xmlns="http://www.w3.org/2000/svg" class="add-to-wishlist"
                                        onclick="toggleWishlist('<%= element.id %>')">
                                        <path
                                            d="M11.0661 2.81728L11.6026 3.45246L12.1391 2.81728C13.2867 1.45859 15.0479 0.600098 16.8697 0.600098C20.0815 0.600098 22.6051 3.13599 22.6051 6.38807C22.6051 8.38789 21.72 10.2564 20.0229 12.3496C18.3175 14.4529 15.8645 16.6977 12.8407 19.4622L12.826 19.4756L12.8249 19.4766L11.6008 20.6001L10.3798 19.4879L10.3783 19.4866L10.3336 19.4457C10.3336 19.4457 10.3336 19.4457 10.3336 19.4457C7.31862 16.6834 4.87347 14.4409 3.17365 12.3404C1.4821 10.25 0.600098 8.38442 0.600098 6.38807C0.600098 3.13599 3.12361 0.600098 6.33544 0.600098C8.15729 0.600098 9.91845 1.45859 11.0661 2.81728Z"
                                            stroke="#333333" stroke-width="1" />
                                    </svg>
                                </div>
                                <!-- Ribbon element -->
                                <% if (element.onOffer) { %>
                                    <div class="ribbon">
                                        <%=element.discount%>% OFF!
                                    </div>
                                    <% } %>
                                        <div>
                                            <img src="/<%=element.image[0]%>" class="card-img-top" alt="..."
                                                style="height:max-content">
                                        </div>
                                        <div class="card " style="background-color:#e5e6de">
                                            <span class="badge badge-pill badge-danger"
                                                style="width:40px;height:20px;margin: 10px 0 0 10px;">
                                                <%=element.availableStock%>
                                            </span>
                                            <h3 style="font-weight:bold">
                                                <%=element.model%>
                                            </h3>
                                            <p style="font-style:italic">
                                                <%=element.description%>
                                            </p>
                                            <p style="font-style:100">
                                                <%=element.color%>
                                            </p>
                                            <div style="display: flex; justify-content:center">
                                                <% for (let i=1; i <=5; i++) { %>
                                                    <% if (i <=element.ratings) { %>
                                                        <!-- Output a filled star if the index is less than or equal to the product's rating -->
                                                        <i class="fas fa-star filled"></i>
                                                        <% } else { %>
                                                            <!-- Output an empty star if the index is greater than the product's rating -->
                                                            <i class="far fa-star"></i>
                                                            <% } %>
                                                                <% } %>
                                            </div>
                                            <p style="font-size:larger; font-weight:bold">
                                                <% if (element.onOffer) { %>
                                                    ₹<%= element.offerPrice %>
                                                        <!-- Display the discounted price if an offer is applied -->
                                                        <% } else { %>
                                                            ₹<%= element.price %>
                                                                <!-- Display the original price if no offer is applied -->
                                                                <% } %>
                                            </p>
                                            <button class="snake-btn"
                                                onclick="location.href='/proddes/<%= element.id %>'">Shop now</button>
                                        </div>
                            </div>
                        </div>
                        <% }); %>
                </div>
            </div>
            <% } else { %>
                <!-- Display a message or placeholder indicating that the category is unlisted -->
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <p>This category is currently unlisted. No products are displayed.</p>
                        </div>
                    </div>
                </div>
                <% } %>

                    <br>
                    <br>
                    <%- include("footer") %>


                        <%- include('tabletfiltermodal') %>
                            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
                            <script
                                src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
                            <script src="/js/script.js"></script>
                            <script>
                                document.getElementById('filterBtn').addEventListener('click', function () {
                                    $('#TfilterModal').modal('show');
                                });

                                // Function to get random numbers between two numbers
                                function getRandomInt(min, max) {
                                    return Math.random() * (max - min) + min;
                                }

                                // Function to create random movement for the hearts
                                const keyframeRandomMove = () => Math.floor(getRandomInt(-100, 100));

                                // Function to create random animation for the hearts
                                const keyframesMove = (index) => `<style class="style-move-heart">
        @keyframes move-heart-${index} {
            from {transform: translate(-50%, -50%); opacity: 1;}
            to {transform: translate(${keyframeRandomMove()}%, ${keyframeRandomMove()}%); opacity: 0;}
        }
        .move-heart-${index} {
            animation: move-heart-${index} 1s 0s ease-in-out forwards;
        }
    </style>`;

                                // Function to create the heart SVG
                                const heart = ({ color, moveSideWise, moveUpOrDown }, index) => `
        <svg viewBox="0 0 24 22" fill="${color}" xmlns="http://www.w3.org/2000/svg" class="sub-hearts move-heart-${index}" style="top:${moveSideWise()}%; left:${moveUpOrDown()}%;">
            <path d="M11.0661 2.81728L11.6026 3.45246L12.1391 2.81728C13.2867 1.45859 15.0479 0.600098 16.8697 0.600098C20.0815 0.600098 22.6051 3.13599 22.6051 6.38807C22.6051 8.38789 21.72 10.2564 20.0229 12.3496C18.3175 14.4529 15.8645 16.6977 12.8407 19.4622L12.826 19.4756L12.8249 19.4766L11.6008 20.6001L10.3798 19.4879L10.3783 19.4866L10.3336 19.4457C10.3336 19.4457 10.3336 19.4457 10.3336 19.4457C7.31862 16.6834 4.87347 14.4409 3.17365 12.3404C1.4821 10.25 0.600098 8.38442 0.600098 6.38807C0.600098 3.13599 3.12361 0.600098 6.33544 0.600098C8.15729 0.600098 9.91845 1.45859 11.0661 2.81728Z" stroke="#333333" stroke-width="1"/>
        </svg>`;

                                // Object with all info to create mini-hearts with random position
                                const heartsDirection = {
                                    numberOfHearts: () => Math.floor(getRandomInt(6, 10)), // Random from 3 to 6
                                    moveSideWise: () => Math.floor(getRandomInt(0, 100)), // Random from 0 to 70%
                                    moveUpOrDown: () => Math.floor(getRandomInt(0, 100)), // Random from 0 to 70%
                                    color: '#00D0A6',
                                };

                                // Click big-heart -> magic happen
                                document.querySelectorAll('.add-to-wishlist').forEach(btn => {
                                    btn.addEventListener('click', function () {
                                        // Find the heart container associated with the clicked product
                                        const heartContainer = this.closest('.card').querySelector('.heart-container');
                                        // Toggle fill-heart class on the clicked button
                                        this.classList.toggle('fill-heart');
                                        // Check if fill-heart class is added or removed
                                        if (this.classList.contains('fill-heart')) {
                                            // If fill-heart class is added, apply heart animation
                                            for (let i = 1; i < heartsDirection.numberOfHearts(); i++) {
                                                heartContainer.insertAdjacentHTML('beforeend', heart(heartsDirection, i));
                                                document.head.insertAdjacentHTML("beforeend", keyframesMove(i));
                                            }
                                            // Add product to wishlist
                                            addToWishlist(this.dataset.productId);
                                        } else {
                                            // If fill-heart class is removed, remove only the last sub-heart and its associated animation from the heart container
                                            const lastSubHeart = heartContainer.querySelector('.sub-hearts:last-child');
                                            lastSubHeart.remove();
                                            const lastSubHeartAnimation = document.querySelector('.move-heart-' + (heartsDirection.numberOfHearts() - 1));
                                            lastSubHeartAnimation.remove();
                                            // Remove product from wishlist
                                            removeFromWishlist(this.dataset.productId);
                                        }
                                    });
                                });

                                function toggleWishlist(productId) {
                                    const heartIcon = document.getElementById(`wishlist-icon-${productId}`);
                                    const isFilled = heartIcon.classList.contains('fill-heart');

                                    if (isFilled) {
                                        removeFromWishlist(productId)
                                            .then(() => {
                                                heartIcon.classList.remove('fill-heart');
                                                heartIcon.setAttribute('fill', '#3cf696');
                                            })
                                            .catch(error => console.error('Error removing product from wishlist:', error));
                                    } else {
                                        addToWishlist(productId)
                                            .then(() => {
                                                heartIcon.classList.add('fill-heart');
                                                heartIcon.setAttribute('fill', 'red');
                                            })
                                            .catch(error => console.error('Error adding product to wishlist:', error));
                                    }
                                }

                                function addToWishlist(productId) {
                                    return fetch(`/wishlist/addwishlist/${productId}`, {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({ productId: productId })
                                    });
                                }

                                function removeFromWishlist(productId) {
                                    return fetch(`/wishlist/removewishlist/${productId}`, {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        }
                                    });
                                }
                            </script>
</body>

</html>